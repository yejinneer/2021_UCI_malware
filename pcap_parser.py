#!/usr/bin/env python
# coding: utf-8

# os 패키지
import os
# 시스템 패키지
import sys
# 파이썬 아규먼트를 위해사용
import argparse
# 소켓 통신 모듈 불러오기 
from socket import AF_INET, socket, SOCK_STREAM, SOL_SOCKET, SO_REUSEADDR
# 텍스트 포맷 관련 import
from TextFormat import bcolors, MENU_PRINT_FORMAT, TITLE_PRINT_FORMAT
# Pcap 클래스
from Pcap import Pcap, PcapPacketHeader, PcapPacketData

import traceback

from tqdm import tqdm


# 사용자 텍스트 인터페이스 클래스
class Tui:
    # 메인메뉴 딕셔너리
    MENU = {
        '1':'1. 파일 내용 확인',
        '2':'2. 프로그램 종료'
    }
    
    # pcap 클래스
    pcap = ''
    
    def __init__(self, file_path):
        # pcap 클래스 초기화
        self.pcap = Pcap(file_path)
        # 메인루프 진행
        self.main()
    
    # 메인 기능 
    def main(self):
        if(self.pcap.loaded):
            print("")
            # self.pcap.save()
        else:
            print("error")

        # 사용자가 프로그램을 종료할 때 까지 반복
        while(True):
            self.show_pcap_data()

    # 메뉴 출력
    def show_menus(self, menus, use_menus=['1','2','3','4']):
        # 타이틀 출력
        title_str = MENU_PRINT_FORMAT.format(" 메뉴를 선택하세요. ")
        print(title_str)
        
        # 각 메뉴들을 포맷에 맞게 출력
        for menu in menus:
            if(menu not in use_menus):
                continue
            print("{1}#{2}{0}{1}#{2}".format(menus[menu].center(len(title_str)-9),bcolors.OKBLUE, bcolors.ENDC))
            
        print("{1}{0}{2}".format("-" * (len(title_str)-1),bcolors.OKBLUE, bcolors.ENDC))
        print()

        # 메뉴 선택
    def select_menu(self, menu_list, desc='OPTIONS'):
        # 제대로된 input이 들어올때 까지 반복
        while(True):
            # 입력 받기
            # desc 가 None일경우 텍스트 재지정
            if(desc is None):
                desc = "Select One : "

            select = input("{} : ".format(desc))
            
            # 만약 정해져있는 메뉴리스트에 포함되지않는 값이 들어올 경우 반복
            if(select not in menu_list):
                print("Reselect")
                continue
            
            break
        
        # 선택된 메뉴번호 반환
        return select
        
    # pcap 파일 내용 확인 메뉴
    def show_pcap_data(self):
        # binary파일 정보 출력
        self.pcap.binary.print_info()
        # 글로벌헤더 정보 출력
        self.pcap.global_header.print_info()

        # 서브메뉴 딕셔너리
        SUB_MENU = {
                '1':'1. Packet detail info',
                '2':'2. Go back'
        }
        page_per_packets = 4
        
        now_page = 1
        tot_len = self.pcap.cnt
        tot_page = int(tot_len / page_per_packets)
        
        # 마지막 페이지가 페이지별 패킷 갯수로 나뉘는지 확인( 3개, 2개, 등..)
        last =  page_per_packets % tot_page
        
        if(last > 0):
            tot_page += 1
                    
        # 페이지 시작 번호
        start = 0
        # 페이지 종료 번호
        end= page_per_packets
        # 사용자가 이전메뉴로 복귀하기 전까지 무한반복
        while(True):
            # 범위 출력
            self.pcap.print_packet_range(start, end)
            # 이전페이지, 다음페이지, 이전메뉴중 선택
            select = self.select_menu(menu_list=['1','2','3','4','5'], desc="({} / {}) 1: First Page    2: Prev    3: Next    4: Last Page    5: Back to Option".format(now_page, tot_page))

            os.system('cls')
            
            # 첫번째 페이지 이동
            if(select == '1'):
                now_page = 1
                start = 0
                end = page_per_packets
            # 마지막 페이지 이동
            elif(select == '4'):
                now_page = tot_page
                start = ((tot_page * page_per_packets) - page_per_packets)
                end = (tot_page * page_per_packets) -1
            # 이전페이지일 경우
            elif(select == '2'):
                # 맨첫 페이지 일 경우
                if(start == 0):
                    print("First Page")
                else:
                    start -= page_per_packets
                    end -= page_per_packets
                    now_page -= 1 
            
            # 다음페이지일 경우
            elif(select == '3'):
                if(now_page >= tot_page):
                    print("Last Page")
                else:
                    start += page_per_packets
                    end += page_per_packets
                    
                    if(end >= tot_len):
                        end = tot_len
                        
                    now_page += 1
            
            # 이전메뉴일 경우
            else:
                break

# In[250]:

# argsparse 생성
parser = argparse.ArgumentParser(description="pcap File Parser")
# pcap 파일 인자 추가
parser.add_argument('--pcap', metavar='pcap_file_path', type=str, required=False, help='pcap파일의 경로를 입력해주세요.')
# json 파일 인자 추가
parser.add_argument('--json', metavar='json_file_path', type=str, required=False, help='json파일의 경로를 입력해주세요.')

# 사용자로부터 전달받은 args
args = parser.parse_args()

# pcap 인자를 통해 Tui 객체 생성
Tui(args.pcap)